// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package logging

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type ThriftLoggingService interface {
	// Parameters:
	//  - Record
	Report(record *ThriftLogRecord) (err error)
}

type ThriftLoggingServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewThriftLoggingServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftLoggingServiceClient {
	return &ThriftLoggingServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewThriftLoggingServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftLoggingServiceClient {
	return &ThriftLoggingServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Record
func (p *ThriftLoggingServiceClient) Report(record *ThriftLogRecord) (err error) {
	if err = p.sendReport(record); err != nil {
		return
	}
	return
}

func (p *ThriftLoggingServiceClient) sendReport(record *ThriftLogRecord) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("report", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := ReportArgs{
		Record: record,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

type ThriftLoggingServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ThriftLoggingService
}

func (p *ThriftLoggingServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ThriftLoggingServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ThriftLoggingServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewThriftLoggingServiceProcessor(handler ThriftLoggingService) *ThriftLoggingServiceProcessor {

	self0 := &ThriftLoggingServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self0.processorMap["report"] = &thriftLoggingServiceProcessorReport{handler: handler}
	return self0
}

func (p *ThriftLoggingServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x1 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x1.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x1

}

type thriftLoggingServiceProcessorReport struct {
	handler ThriftLoggingService
}

func (p *thriftLoggingServiceProcessorReport) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ReportArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Report(args.Record); err2 != nil {
		return true, err2
	}
	return true, nil
}

// HELPER FUNCTIONS AND STRUCTURES

type ReportArgs struct {
	Record *ThriftLogRecord `thrift:"record,1" json:"record"`
}

func NewReportArgs() *ReportArgs {
	return &ReportArgs{}
}

var ReportArgs_Record_DEFAULT *ThriftLogRecord

func (p *ReportArgs) GetRecord() *ThriftLogRecord {
	if !p.IsSetRecord() {
		return ReportArgs_Record_DEFAULT
	}
	return p.Record
}
func (p *ReportArgs) IsSetRecord() bool {
	return p.Record != nil
}

func (p *ReportArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ReportArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Record = &ThriftLogRecord{}
	if err := p.Record.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Record, err)
	}
	return nil
}

func (p *ReportArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("report_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ReportArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("record", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:record: %s", p, err)
	}
	if err := p.Record.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Record, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:record: %s", p, err)
	}
	return err
}

func (p *ReportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportArgs(%+v)", *p)
}
